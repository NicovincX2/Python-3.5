# -*- coding: utf-8 -*-

"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""

import os
import math


def find_div(n):
    ''' find the divisor of a given n'''
    set_div = {1, n}
    for i in range(2, int(math.sqrt(n)) + 1):
        if not n % i:
            set_div.add(i)
            set_div.add(n // i)
    l1 = list(set_div)
    return len(l1)


def find_trian(l):
    ''' find the lth trian number'''
    return sum(range(1, l + 1))


def highly_divisible_trian_num(d):
    thtriangle, n_div, count = 1, 0, 1
    while n_div < d:
        count += 1
        thtriangle += count
        n_div = find_div(thtriangle)
    return (thtriangle, count)


def main():
    import time
    start = time.time()
    assert(highly_divisible_trian_num(6) == (28, 7))
    print(highly_divisible_trian_num(500))

    elapsed = (time.time() - start)
    print('Tests Passed!\n It took %s seconds to run them.' % (elapsed))

if __name__ == '__main__':
    main()

os.system("pause")
